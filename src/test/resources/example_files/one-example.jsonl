{"test_method": "@Test\n    public void testNaturalNumber() throws Exception {\n        Object ret = reader.read(\"123\");\n        assertNotNull(ret);\n        assertEquals(Long.class, ret.getClass());\n        assertEquals(123L, ret);\n    }", "focal_method": "public Object read(String string) throws JSONException {\n        this.it = new StringCharacterIterator(string);\n        this.c = this.it.first();\n\n        return this.read();\n    }", "test_file": "/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.struts2.json;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\n/**\n * User: mcucchiara\n * Date: 10/11/11\n * Time: 17.26\n */\npublic class JSONReaderTest {\n    private JSONReader reader = new JSONReader();\n\n    @Test\n    public void testExponentialNumber() throws Exception {\n        Object ret = reader.read(\"5e-5\");\n        assertNotNull(ret);\n        assertEquals(Double.class, ret.getClass());\n        assertEquals(5.0E-5, ret);\n    }\n\n    @Test\n    public void testExponentialNumber2() throws Exception {\n        Object ret = reader.read(\"123.4e10\");\n        assertNotNull(ret);\n        assertEquals(Double.class, ret.getClass());\n        assertEquals(123.4e10, ret);\n    }\n\n    @Test\n    public void testDecimalNumber() throws Exception {\n        Object ret = reader.read(\"3.2\");\n        assertNotNull(ret);\n        assertEquals(Double.class, ret.getClass());\n        assertEquals(3.2, ret);\n    }\n\n    @Test\n    public void testNaturalNumber() throws Exception {\n        Object ret = reader.read(\"123\");\n        assertNotNull(ret);\n        assertEquals(Long.class, ret.getClass());\n        assertEquals(123L, ret);\n    }\n}\n", "focal_file": "/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.struts2.json;\n\nimport java.text.CharacterIterator;\nimport java.text.StringCharacterIterator;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * <p>\n * Deserializes and object from a JSON string\n * </p>\n */\npublic class JSONReader {\n    private static final Object OBJECT_END = new Object();\n    private static final Object ARRAY_END = new Object();\n    private static final Object COLON = new Object();\n    private static final Object COMMA = new Object();\n    private static Map<Character, Character> escapes = new HashMap<Character, Character>();\n\n    static {\n        escapes.put('\"', '\"');\n        escapes.put('\\\\', '\\\\');\n        escapes.put('/', '/');\n        escapes.put('b', '\\b');\n        escapes.put('f', '\\f');\n        escapes.put('n', '\\n');\n        escapes.put('r', '\\r');\n        escapes.put('t', '\\t');\n    }\n\n    private CharacterIterator it;\n    private char c;\n    private Object token;\n    private StringBuilder buf = new StringBuilder();\n\n    protected char next() {\n        this.c = this.it.next();\n\n        return this.c;\n    }\n\n    protected void skipWhiteSpace() {\n        while (Character.isWhitespace(this.c)) {\n            this.next();\n        }\n    }\n\n    public Object read(String string) throws JSONException {\n        this.it = new StringCharacterIterator(string);\n        this.c = this.it.first();\n\n        return this.read();\n    }\n\n    protected Object read() throws JSONException {\n        Object ret;\n\n        this.skipWhiteSpace();\n\n        if (this.c == '\"') {\n            this.next();\n            ret = this.string('\"');\n        } else if (this.c == '\\'') {\n            this.next();\n            ret = this.string('\\'');\n        } else if (this.c == '[') {\n            this.next();\n            ret = this.array();\n        } else if (this.c == ']') {\n            ret = ARRAY_END;\n            this.next();\n        } else if (this.c == ',') {\n            ret = COMMA;\n            this.next();\n        } else if (this.c == '{') {\n            this.next();\n            ret = this.object();\n        } else if (this.c == '}') {\n            ret = OBJECT_END;\n            this.next();\n        } else if (this.c == ':') {\n            ret = COLON;\n            this.next();\n        } else if ((this.c == 't') && (this.next() == 'r') && (this.next() == 'u') && (this.next() == 'e')) {\n            ret = Boolean.TRUE;\n            this.next();\n        } else if ((this.c == 'f') && (this.next() == 'a') && (this.next() == 'l') && (this.next() == 's')\n                && (this.next() == 'e')) {\n            ret = Boolean.FALSE;\n            this.next();\n        } else if ((this.c == 'n') && (this.next() == 'u') && (this.next() == 'l') && (this.next() == 'l')) {\n            ret = null;\n            this.next();\n        } else if (Character.isDigit(this.c) || (this.c == '-')) {\n            ret = this.number();\n        } else {\n            throw buildInvalidInputException();\n        }\n\n        this.token = ret;\n\n        return ret;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    protected Map object() throws JSONException {\n        Map ret = new HashMap();\n        Object next = this.read();\n        if (next != OBJECT_END) {\n            String key = (String) next;\n            while (this.token != OBJECT_END) {\n                this.read(); // should be a colon\n\n                if (this.token != OBJECT_END) {\n                    ret.put(key, this.read());\n\n                    if (this.read() == COMMA) {\n                        Object name = this.read();\n\n                        if (name instanceof String) {\n                            key = (String) name;\n                        } else\n                            throw buildInvalidInputException();\n                    }\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    protected JSONException buildInvalidInputException() {\n        return new JSONException(\"Input string is not well formed JSON (invalid char \" + this.c + \")\");\n    }\n\n    \n    @SuppressWarnings(\"unchecked\")\n    protected List array() throws JSONException {\n        List ret = new ArrayList();\n        Object value = this.read();\n\n        while (this.token != ARRAY_END) {\n            ret.add(value);\n\n            Object read = this.read();\n            if (read == COMMA) {\n                value = this.read();\n            } else if (read != ARRAY_END) {\n                throw buildInvalidInputException();\n            }\n        }\n\n        return ret;\n    }\n\n    protected Object number() throws JSONException {\n        this.buf.setLength(0);\n        boolean toDouble = false;\n\n        if (this.c == '-') {\n            this.add();\n        }\n\n        this.addDigits();\n\n        if (this.c == '.') {\n            toDouble = true;\n            this.add();\n            this.addDigits();\n        }\n\n        if ((this.c == 'e') || (this.c == 'E')) {\n            toDouble = true;\n            this.add();\n\n            if ((this.c == '+') || (this.c == '-')) {\n                this.add();\n            }\n\n            this.addDigits();\n        }\n\n        if (toDouble) {\n            try {\n                return Double.parseDouble(this.buf.toString());\n            } catch (NumberFormatException e) {\n                throw buildInvalidInputException();\n            }\n        } else {\n            try {\n                return Long.parseLong(this.buf.toString());\n            } catch (NumberFormatException e) {\n                throw buildInvalidInputException();\n            }\n        }\n    }\n\n    protected Object string(char quote) {\n        this.buf.setLength(0);\n\n        while ((this.c != quote) && (this.c != CharacterIterator.DONE)) {\n            if (this.c == '\\\\') {\n                this.next();\n\n                if (this.c == 'u') {\n                    this.add(this.unicode());\n                } else {\n                    Object value = escapes.get(this.c);\n\n                    if (value != null) {\n                        this.add((Character) value);\n                    }\n                }\n            } else {\n                this.add();\n            }\n        }\n\n        this.next();\n\n        return this.buf.toString();\n    }\n\n    protected void add(char cc) {\n        this.buf.append(cc);\n        this.next();\n    }\n\n    protected void add() {\n        this.add(this.c);\n    }\n\n    protected void addDigits() {\n        while (Character.isDigit(this.c)) {\n            this.add();\n        }\n    }\n\n    protected char unicode() {\n        int value = 0;\n\n        for (int i = 0; i < 4; ++i) {\n            switch (this.next()) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n                value = (value << 4) + (this.c - '0');\n\n                break;\n\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n                value = (value << 4) + (this.c - 'W');\n\n                break;\n\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n                value = (value << 4) + (this.c - '7');\n\n                break;\n            }\n        }\n\n        return (char) value;\n    }\n}\n"}
